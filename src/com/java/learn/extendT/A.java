package com.java.learn.extendT;

/*
面向对象的特征？

封装：将对象属性和方法的代码封装到一个模块中，也就是一个类中，保证软件内部具有优良的模块性的基础，实现“高内聚，低耦合”。

抽象：找出一些事物的相似和共性之处，然后归为一个类，该类只考虑事物的相似和共性之处。抽象包括行为抽象和状态抽象。

继承：在已经存在的类的基础上进行，将其定义的内容作为自己的内容，并可以加入新的内容或者修改原来的方法适合特殊的需要。

多态：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果，就是多态，简单点说：就是用父类的引用指向子类的对象。目的：提高代码复用性，解决项目中紧耦合问题，提高可扩展性。

多态的机制：靠的是父类的或者接口的引用变量可以指向子类或者具体实现类的实例对象。

重载（Overload）：函数名相同，参数不同。可以改变返回值类型，参数的个数和类型。

重写（Override）：和父类的的方法名称、参数完全相同。
    《重写包含两同两小一大原则》：
    方法名相同，参数类型相同，
    子类返回类型小于等于父类方法返回类型，
    子类抛出异常小于等于父类方法抛出异常，
    子类访问权限大于等于父类方法访问权限

*/

public class A {

    // 本部类，同包，子类继承， 外部包 可以使用继承
    public void run() {
        System.out.println("A can run...");
    }

    // 本类，同包，子类 可以继承使用 ，外包下的类不能使用
    protected void hello() {
        System.out.println("A hello ...");
    }

    // default 本类，本包下类（包含子类）使用，外部包子类不能继承， 异包下子类不能继承使用
    void cry() {
        System.out.println("A is cry...");
    }

    // 本部类使用，不能被本包下其他类使用，子类继承，异包类使用，
    private void say() {

    }

    // 静态方法可以继承
    static void eat() {
        System.out.println("A can eat...");
    }

    static final void sleep() {
        System.out.println("A can eat...");
    }
}
